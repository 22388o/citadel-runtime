[package]
name = "mycitadel"
description = "Node operating MyCitadel wallet (can be embedded, self- or cloud-hosted)"
version = "0.1.0-beta"
license = "AGPL-3.0-only"
authors = ["Dr. Maxim Orlovsky <orlovsky@mycitadel.io>"]
keywords = ["bitcoin", "rgb", "wallet", "lightning"]
edition = "2018"
readme = "README.md"
build = "build.rs"
exclude = [".github", "/test", "/data", "Dockerfile", "/shell", "libmycitadel"]

[[bin]]
name = "mycitadel"
required-features = ["node", "cli"]

[[bin]]
name = "mycitadeld"
required-features = ["server"]

[[bin]]
name = "mycitadel-cli"
required-features = ["cli"]

[dependencies]
# LNP/BP crates
amplify = { version = "3", features = ["serde"] }
amplify_derive = "2.4.4"
slip132 = { version = "0.3.2", features = ["serde"] }
strict_encoding = { version = "1.0.7", features = ["chrono", "crypto", "miniscript", "derive"] }
descriptor-wallet = { git = "https://github.com/LNP-BP/descriptor-wallet", features = ["serde"] }
lnpbp = { git = "https://github.com/LNP-BP/rust-lnpbp", features = ["serde"] }
lnpbp_invoice = { git = "https://github.com/LNP-BP/rust-lnpbp", features = ["serde", "rgb"] }
lnp-core = { git = "https://github.com/LNP-BP/lnp-core", features = ["serde"] }
rgb-core = { git = "https://github.com/rgb-org/rgb-core", features = ["serde"] }
rgb20 = { git = "https://github.com/rgb-org/rgb-core", features = ["serde"] }
# rgb21 = { version = "0.3.0-beta.3", optional = true }
# rgb22 = { version = "0.3.0-beta.3", optional = true }
# rgb23 = { version = "0.3.0-beta.3", optional = true }
rgb_node = { git = "https://github.com/rgb-org/rgb-node", default-features = false, features = ["fungibles", "serde"] }
internet2 = { git = "https://github.com/internet2-org/rust-internet2", features = ["serde"] }
microservices = { git = "https://github.com/internet2-org/rust-internet2", default-features = false, features = ["serde"] }
# Bitcoin
bitcoin = { version = "0.26", features = ["use-serde"] }
miniscript = { version = "5", features = ["use-serde"] }
electrum-client = { version = "0.6", optional = true }
# Rust language
lazy_static = "1.4"
chrono = { version = "0.4", features = ["serde"] }
# Serialization & parsing
serde = { version = "1", features = ["derive"] }
serde_with = { version = "1.5", features = ["hex", "chrono"] }
serde_json = "1"
serde_yaml = "0.8"
toml = "0.5"
bech32 = "0.7"
base64 = "0.12"
# Congig & logging
log = { version = "0.4", features = ["max_level_trace", "release_max_level_debug"] }
env_logger = "0.7"
clap = { version = "3.0.0-beta.2", optional = true }
settings = { version = "0.10", package = "config", optional = true }
configure_me = { version = "0.4", optional = true }
dotenv = { version = "0.15", optional = true }
colored = { version = "2", optional = true }
shellexpand = { version = "2", optional = true }

[build-dependencies]
amplify = "3"
amplify_derive = "2.4.2"
descriptor-wallet = { git = "https://github.com/LNP-BP/descriptor-wallet" }
lnpbp = { git = "https://github.com/LNP-BP/rust-lnpbp" }
lnpbp_invoice = { git = "https://github.com/LNP-BP/rust-lnpbp" }
bitcoin = "0.26"
rgb-core = { git = "https://github.com/rgb-org/rgb-core", features = ["serde"] }
internet2 = { git = "https://github.com/internet2-org/rust-internet2" }
microservices = { git = "https://github.com/internet2-org/rust-internet2", default-features = false }
lazy_static = "1.4"
clap = "3.0.0-beta.2"
clap_generate = "3.0.0-beta.2"
log = { version = "0.4", features = ["max_level_trace", "release_max_level_debug"] }
shellexpand = "2"
configure_me_codegen = "0.4"
serde = { version = "1", features = ["derive"] }
serde_with = { version = "1.5", features = ["hex", "chrono"] }
colored = { version = "2", optional = true }

# Recommended set of features:
# 1. Standalone node: `server` (=`node`+`shell`)
# 2. Cli to remote node: `cli` (auto includes `shell` and `integration`)
# 3. Mobile app talking to a server: `client`
# 4. Mobile app with embedded node: `embedded` (auto includes `client` + `node`)
# 5. Simple cli utility app: `shell`
[features]
default = ["server", "cli"]
all = ["server", "cli", "tor", "sql", "nosql", "vendored_openssl"]

# Server is a standalone application that runs daemon
server = ["node", "shell", "microservices/server", "rgb_node/server"]
# Command-line application feature
cli = ["shell", "client", "microservices/cli", "rgb_node/cli"]

# Embedded is an app that contains embedded node and that talks to it through
# integration layer
embedded = ["client", "node", "microservices/embedded", "rgb_node/embedded"]
# Server node can be run as a part of mobile app and other types of clients;
# thus `server` != `node`.
# This feature results in building with features not required for command-line
node = ["internet2/keygen", "bitcoin/rand", "internet2/zmq", "microservices/node", "rgb_node/node",
    "internet2/url", "electrum-client", "_rpc"]
# Feature is required for any applications that talks to daemon processes
client = ["internet2/zmq", "microservices/client", "microservices/node", "rgb_node/node", "bitcoin/rand",
    "electrum-client",
    "internet2/url", "clap", "_rpc"]
# Required for all apps that can be launched from command-line shell as binaries
# (i.e. both servers and cli)
shell = [
    "dotenv", "clap", "settings", "configure_me",
    "amplify/parse_arg", "microservices/shell", "rgb_node/shell", "shellexpand", "colored"
]

# Internally used features for convenience
_rpc = []

tor = ["microservices/tor", "internet2/tor", "rgb_node/tor"]
sql = ["rgb_node/diesel"]
nosql = ["rgb_node/hammersbald"]
vendored_openssl = ["microservices/vendored_openssl", "internet2/vendored_openssl", "rgb_node/vendored_openssl"]

[package.metadata.configure_me]
spec = "config_spec.toml"

[patch.crates-io]
# Required to fix Android SystemTime incorrect size
lightning-invoice = { git = "https://github.com/LNP-BP/rust-lightning-invoice", tag = "systemtime-fix" }
# Remove this once https://github.com/jean-airoldie/zeromq-src-rs/pull/15 got merged
zeromq-src = { git = "https://github.com/LNP-BP/zeromq-src-rs", branch = "fix/cmake" }

[workspace]
members = [".", "libmycitadel"]
default-members = [".", "libmycitadel"]
exclude = ["shell"]