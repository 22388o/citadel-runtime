#compdef mycitadel-cli

autoload -U is-at-least

_mycitadel-cli() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'*-T+[Use Tor]: :_hosts' \
'*--tor-proxy=[Use Tor]: :_hosts' \
'-x+[ZMQ socket name/address for MyCitadel node RPC interface]: :_files' \
'--rpc-endpoint=[ZMQ socket name/address for MyCitadel node RPC interface]: :_files' \
'-c+[Path to the configuration file]: :_files' \
'--config=[Path to the configuration file]: :_files' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_mycitadel-cli_commands" \
"*::: :->mycitadel-cli" \
&& ret=0
    case $state in
    (mycitadel-cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-cli-command-$line[1]:"
        case $line[1] in
            (wallet)
_arguments "${_arguments_options[@]}" \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_mycitadel-cli__wallet_commands" \
"*::: :->wallet" \
&& ret=0
case $state in
    (wallet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-cli-wallet-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-f+[How the wallet list should be formatted]' \
'--format=[How the wallet list should be formatted]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
'--bare[Creates old "bare" wallets, where public key is kept in the explicit form within bitcoin transaction P2PK output]' \
'--legacy[Whether create a pre-SegWit wallet (P2PKH) rather than SegWit (P2WPKH). If you'\''d like to use legacy SegWit-style addresses (P2WPKH-in-P2SH), do not use this flag, create normal SegWit wallet instead and specify `--legacy` option when requesting new address]' \
'--segwit[Recommended SegWit wallet with P2WKH and P2WPKH-in-P2SH outputs]' \
'--taproot[Reserved for the future taproot P2TR outputs]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_mycitadel-cli__wallet__create_commands" \
"*::: :->create" \
&& ret=0
case $state in
    (create)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-cli-wallet-create-command-$line[1]:"
        case $line[1] in
            (single-sig)
_arguments "${_arguments_options[@]}" \
'--bare[Creates old "bare" wallets, where public key is kept in the explicit form within bitcoin transaction P2PK output]' \
'--legacy[Whether create a pre-SegWit wallet (P2PKH) rather than SegWit (P2WPKH). If you'\''d like to use legacy SegWit-style addresses (P2WPKH-in-P2SH), do not use this flag, create normal SegWit wallet instead and specify `--legacy` option when requesting new address]' \
'--segwit[Recommended SegWit wallet with P2WKH and P2WPKH-in-P2SH outputs]' \
'--taproot[Reserved for the future taproot P2TR outputs]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':name -- Wallet name:' \
':pubkey-chain -- Extended public key with derivation info:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(rename)
_arguments "${_arguments_options[@]}" \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':wallet-id -- Wallet id to rename:' \
':new-name -- New name of the wallet:' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':wallet-id -- Wallet id to delete:' \
&& ret=0
;;
(balance)
_arguments "${_arguments_options[@]}" \
'-r+[Whether to re-scan addresses space with Electrum server]' \
'--rescan=[Whether to re-scan addresses space with Electrum server]' \
'--lookup-depth=[How many addresses should be scanned at least after the final address with no transactions is reached]' \
'-f+[How the command output should be formatted]' \
'--format=[How the command output should be formatted]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':wallet-id -- Wallet id for the operation:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(address)
_arguments "${_arguments_options[@]}" \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_mycitadel-cli__address_commands" \
"*::: :->address" \
&& ret=0
case $state in
    (address)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-cli-address-command-$line[1]:"
        case $line[1] in
            (list-used)
_arguments "${_arguments_options[@]}" \
'-r+[Whether to re-scan addresses space with Electrum server]' \
'--rescan=[Whether to re-scan addresses space with Electrum server]' \
'--lookup-depth=[How many addresses should be scanned at least after the final address with no transactions is reached]' \
'-f+[How the command output should be formatted]' \
'--format=[How the command output should be formatted]' \
'-l+[Limit the number of addresses printed]' \
'--limit=[Limit the number of addresses printed]' \
'-f+[How the command output should be formatted]' \
'--format=[How the command output should be formatted]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':wallet-id -- Wallet id for the operation:' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
'-i+[Create address at custom index number]' \
'--index=[Create address at custom index number]' \
'-n+[Number of addresses to create]' \
'--no=[Number of addresses to create]' \
'-u[Whether to mark address as used]' \
'--unmarked[Whether to mark address as used]' \
'--legacy[Use SegWit legacy address format (applicable only to a SegWit wallets)]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(mark-used)
_arguments "${_arguments_options[@]}" \
'--legacy[Use SegWit legacy address format (applicable only to a SegWit wallets)]' \
'-u[Remove use mark (inverses the command)]' \
'--unmark[Remove use mark (inverses the command)]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'::index -- Index of address derivation path (use `address list` command to see address indexes:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(asset)
_arguments "${_arguments_options[@]}" \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_mycitadel-cli__asset_commands" \
"*::: :->asset" \
&& ret=0
case $state in
    (asset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-cli-asset-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-f+[How the asset list output should be formatted]' \
'--format=[How the asset list output should be formatted]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':genesis -- Bech32-representation of the asset genesis (string starting with `genesis1....`:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_mycitadel-cli_commands] )) ||
_mycitadel-cli_commands() {
    local commands; commands=(
        "wallet:Wallet management commands" \
"address:Address-related commands" \
"asset:Asset management commands" \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'mycitadel-cli commands' commands "$@"
}
(( $+functions[_mycitadel-cli__address_commands] )) ||
_mycitadel-cli__address_commands() {
    local commands; commands=(
        "list-used:Print address list" \
"create:" \
"mark-used:" \
    )
    _describe -t commands 'mycitadel-cli address commands' commands "$@"
}
(( $+functions[_mycitadel-cli__asset_commands] )) ||
_mycitadel-cli__asset_commands() {
    local commands; commands=(
        "list:Lists known assets" \
"import:Import asset genesis data" \
    )
    _describe -t commands 'mycitadel-cli asset commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet__balance_commands] )) ||
_mycitadel-cli__wallet__balance_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli wallet balance commands' commands "$@"
}
(( $+functions[_mycitadel-cli__address__create_commands] )) ||
_mycitadel-cli__address__create_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli address create commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet__create_commands] )) ||
_mycitadel-cli__wallet__create_commands() {
    local commands; commands=(
        "single-sig:Creates current single-sig wallet account" \
    )
    _describe -t commands 'mycitadel-cli wallet create commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet__delete_commands] )) ||
_mycitadel-cli__wallet__delete_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli wallet delete commands' commands "$@"
}
(( $+functions[_mycitadel-cli__help_commands] )) ||
_mycitadel-cli__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli help commands' commands "$@"
}
(( $+functions[_mycitadel-cli__asset__import_commands] )) ||
_mycitadel-cli__asset__import_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli asset import commands' commands "$@"
}
(( $+functions[_mycitadel-cli__asset__list_commands] )) ||
_mycitadel-cli__asset__list_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli asset list commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet__list_commands] )) ||
_mycitadel-cli__wallet__list_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli wallet list commands' commands "$@"
}
(( $+functions[_mycitadel-cli__address__list-used_commands] )) ||
_mycitadel-cli__address__list-used_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli address list-used commands' commands "$@"
}
(( $+functions[_mycitadel-cli__address__mark-used_commands] )) ||
_mycitadel-cli__address__mark-used_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli address mark-used commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet__rename_commands] )) ||
_mycitadel-cli__wallet__rename_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli wallet rename commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet__create__single-sig_commands] )) ||
_mycitadel-cli__wallet__create__single-sig_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'mycitadel-cli wallet create single-sig commands' commands "$@"
}
(( $+functions[_mycitadel-cli__wallet_commands] )) ||
_mycitadel-cli__wallet_commands() {
    local commands; commands=(
        "list:Lists existing wallets" \
"create:Creates wallet with a given name and descriptor parameters" \
"rename:Change a name of a wallet" \
"delete:Delete existing wallet contract" \
"balance:Returns detailed wallet balance information" \
    )
    _describe -t commands 'mycitadel-cli wallet commands' commands "$@"
}

_mycitadel-cli "$@"